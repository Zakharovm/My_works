2016-07-23 16:04:57 - MLog clients using slf4j logging.
2016-07-23 16:04:57 - Initializing c3p0-0.9.5.2 [built 08-December-2015 22:06:04 -0800; debug? true; trace: 10]
2016-07-23 16:04:59 - HHH000412: Hibernate Core {5.2.1.Final}
2016-07-23 16:04:59 - HHH000206: hibernate.properties not found
2016-07-23 16:04:59 - HHH000021: Bytecode provider name : javassist
2016-07-23 16:04:59 - HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2016-07-23 16:05:00 - Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, contextClassLoaderSource -> caller, dataSourceName -> 1hge0yu9i6mbfw31gkpvvl|56620197, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> org.postgresql.Driver, extensions -> {}, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, forceSynchronousCheckins -> false, forceUseNamedDriverClass -> false, identityToken -> 1hge0yu9i6mbfw31gkpvvl|56620197, idleConnectionTestPeriod -> 0, initialPoolSize -> 3, jdbcUrl -> jdbc:postgresql://localhost:5432/restaurant, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 0, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 15, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 1, numHelperThreads -> 3, preferredTestQuery -> null, privilegeSpawnedThreads -> false, properties -> {user=******, password=******}, propertyCycle -> 0, statementCacheNumDeferredCloseThreads -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, userOverrides -> {}, usesTraditionalReflectiveProxies -> false ]
2016-07-23 16:05:04 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQL94Dialect
2016-07-23 16:05:04 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2016-07-23 16:05:04 - HHH000270: Type registration [java.util.UUID] overrides previous : org.hibernate.type.UUIDBinaryType@1253e7cb
2016-07-23 16:05:06 - Selecting the list of employees. 
2016-07-23 16:05:06 - HHH000397: Using ASTQueryTranslatorFactory
2016-07-23 16:05:06 - Find the employee in the table by the name: Vlada
2016-07-23 16:05:06 - Selecting the list of employees. 
2016-07-23 16:05:06 - Selecting the dish list. 
2016-07-23 16:05:06 - Delete the dish from the table: Dish{id=0, name='Napoleon', category=Dessert, price=50.0, weight=300.0}
2016-07-23 16:05:06 - HHH000114: Handling transient entity in delete processing
2016-07-23 16:05:06 - Finding the dish by specific name: Pork
2016-07-23 16:05:06 - Selecting the dish list. 
2016-07-23 16:05:07 - Find the employee in the table by the name: Vlada
2016-07-23 16:05:07 - Finding the dish by specific name: Napoleon
2016-07-23 16:05:07 - Finding the dish by specific name: Fries
2016-07-23 16:05:07 - Finding the dish by specific name: Pasta
2016-07-23 16:05:07 - Adding the order to the table. Orders{id=0, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}], tableNumber=4, dateOfOrder=Sat Jul 23 16:05:06 EEST 2016, currentStatus=Open}
2016-07-23 16:05:07 - Delete the dish from the order. 
2016-07-23 16:05:07 - Finding the order by id 7
2016-07-23 16:05:07 - Finding the dish by specific name: Cake
2016-07-23 16:05:07 - Finding the dish by specific name: Pork
2016-07-23 16:05:07 - Editing the order # 7
2016-07-23 16:05:07 - Finding the order by id 1
2016-07-23 16:05:07 - [Error]: This order has already been closed. 
2016-07-23 16:05:07 - Finding the order by id 3
2016-07-23 16:05:07 - [Error]: This order has already been closed. 
2016-07-23 16:05:07 - Selecting the list of orders. 
2016-07-23 16:05:07 - Find the employee in the table by the name: Aleksandr
2016-07-23 16:05:07 - Finding the dish by specific name: Napoleon
2016-07-23 16:05:07 - Finding the order by id 12
2016-07-23 16:05:07 - Adding the prepared dish to the table. PreparedDishes{id=0, cook=Employee{id=4, surname='Ivanov', name='Aleksandr', dateOfBirth='24-10-1980', phoneNumber='063-151-22-44', position='Cook', salary=8000.0}, dish=Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, order=Orders{id=12, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}, Dish{id=8, name='Pork', category=Garnish, price=40.0, weight=250.0}, Dish{id=11, name='Cake', category=Dessert, price=45.0, weight=250.0}, Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}], tableNumber=4, dateOfOrder=2016-07-22 00:00:00.0, currentStatus=Open}, date=Sat Jul 23 16:05:07 EEST 2016}
2016-07-23 16:05:07 - Selecting the list of prepared dishes. 
2016-07-23 16:05:07 - Finding the dish by specific name: Fries
2016-07-23 16:05:07 - Finding the dish by specific name: Pasta
2016-07-23 16:05:07 - Adding the menu to the table. Menu{id=0, name='Summer_dinner', dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}]}
2016-07-23 16:05:07 - Adding the dishes to the menu. 
2016-07-23 16:05:07 - Finding the menu by specific name: Spring_morning
2016-07-23 16:05:07 - Finding the dish by specific name: Cake
2016-07-23 16:05:07 - Editing the menu 'Spring_morning'. 
2016-07-23 16:05:07 - Delete the dishes from the menu. 
2016-07-23 16:05:07 - Finding the menu by specific name: Spring_morning
2016-07-23 16:05:07 - Finding the dish by specific name: Cake
2016-07-23 16:05:07 - Editing the menu 'Spring_morning'. 
2016-07-23 16:05:07 - Selecting the list of Menu. 
2016-07-23 17:12:12 - MLog clients using slf4j logging.
2016-07-23 17:12:13 - Initializing c3p0-0.9.5.2 [built 08-December-2015 22:06:04 -0800; debug? true; trace: 10]
2016-07-23 17:12:13 - HHH000412: Hibernate Core {5.2.1.Final}
2016-07-23 17:12:13 - HHH000206: hibernate.properties not found
2016-07-23 17:12:13 - HHH000021: Bytecode provider name : javassist
2016-07-23 17:12:13 - HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2016-07-23 17:12:13 - Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, contextClassLoaderSource -> caller, dataSourceName -> 1hge0yu9i6opxli13lawu6|5f058f00, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> org.postgresql.Driver, extensions -> {}, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, forceSynchronousCheckins -> false, forceUseNamedDriverClass -> false, identityToken -> 1hge0yu9i6opxli13lawu6|5f058f00, idleConnectionTestPeriod -> 0, initialPoolSize -> 3, jdbcUrl -> jdbc:postgresql://localhost:5432/restaurant, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 0, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 15, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 1, numHelperThreads -> 3, preferredTestQuery -> null, privilegeSpawnedThreads -> false, properties -> {user=******, password=******}, propertyCycle -> 0, statementCacheNumDeferredCloseThreads -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, userOverrides -> {}, usesTraditionalReflectiveProxies -> false ]
2016-07-23 17:12:18 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQL94Dialect
2016-07-23 17:12:19 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2016-07-23 17:12:19 - HHH000270: Type registration [java.util.UUID] overrides previous : org.hibernate.type.UUIDBinaryType@2c7b5824
2016-07-23 17:13:45 - MLog clients using slf4j logging.
2016-07-23 17:13:45 - Initializing c3p0-0.9.5.2 [built 08-December-2015 22:06:04 -0800; debug? true; trace: 10]
2016-07-23 17:13:45 - HHH000412: Hibernate Core {5.2.1.Final}
2016-07-23 17:13:45 - HHH000206: hibernate.properties not found
2016-07-23 17:13:45 - HHH000021: Bytecode provider name : javassist
2016-07-23 17:13:45 - HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2016-07-23 17:13:46 - Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, contextClassLoaderSource -> caller, dataSourceName -> 1hge0yu9i6orwvr12tft92|5f058f00, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> org.postgresql.Driver, extensions -> {}, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, forceSynchronousCheckins -> false, forceUseNamedDriverClass -> false, identityToken -> 1hge0yu9i6orwvr12tft92|5f058f00, idleConnectionTestPeriod -> 0, initialPoolSize -> 3, jdbcUrl -> jdbc:postgresql://localhost:5432/restaurant, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 0, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 15, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 1, numHelperThreads -> 3, preferredTestQuery -> null, privilegeSpawnedThreads -> false, properties -> {user=******, password=******}, propertyCycle -> 0, statementCacheNumDeferredCloseThreads -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, userOverrides -> {}, usesTraditionalReflectiveProxies -> false ]
2016-07-23 17:13:48 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQL94Dialect
2016-07-23 17:13:49 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2016-07-23 17:13:49 - HHH000270: Type registration [java.util.UUID] overrides previous : org.hibernate.type.UUIDBinaryType@2c7b5824
2016-07-23 17:13:50 - Selecting the list of employees. 
2016-07-23 17:13:50 - HHH000397: Using ASTQueryTranslatorFactory
2016-07-23 17:13:50 - Find the employee in the table by the name: Vlada
2016-07-23 17:13:50 - Selecting the list of employees. 
2016-07-23 17:13:51 - Selecting the dish list. 
2016-07-23 17:13:51 - Delete the dish from the table: Dish{id=0, name='Napoleon', category=Dessert, price=50.0, weight=300.0}
2016-07-23 17:13:51 - HHH000114: Handling transient entity in delete processing
2016-07-23 17:13:51 - Finding the dish by specific name: Pork
2016-07-23 17:13:51 - Selecting the dish list. 
2016-07-23 17:13:51 - Find the employee in the table by the name: Vlada
2016-07-23 17:13:51 - Finding the dish by specific name: Napoleon
2016-07-23 17:13:51 - Finding the dish by specific name: Fries
2016-07-23 17:13:51 - Finding the dish by specific name: Pasta
2016-07-23 17:13:51 - Adding the order to the table. Orders{id=0, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}], tableNumber=4, dateOfOrder=Sat Jul 23 17:13:51 EEST 2016, currentStatus=Open}
2016-07-23 17:13:51 - Delete the dish from the order. 
2016-07-23 17:13:51 - Finding the order by id 7
2016-07-23 17:13:51 - Finding the dish by specific name: Cake
2016-07-23 17:13:51 - Finding the dish by specific name: Pork
2016-07-23 17:13:51 - Editing the order # 7
2016-07-23 17:13:51 - Finding the order by id 1
2016-07-23 17:13:51 - [Error]: This order has already been closed. 
2016-07-23 17:13:51 - Finding the order by id 3
2016-07-23 17:13:51 - [Error]: This order has already been closed. 
2016-07-23 17:13:51 - Selecting the list of orders. 
2016-07-23 17:13:51 - Find the employee in the table by the name: Aleksandr
2016-07-23 17:13:51 - Finding the dish by specific name: Napoleon
2016-07-23 17:13:51 - Finding the order by id 12
2016-07-23 17:13:51 - Adding the prepared dish to the table. PreparedDishes{id=0, cook=Employee{id=4, surname='Ivanov', name='Aleksandr', dateOfBirth='24-10-1980', phoneNumber='063-151-22-44', position='Cook', salary=8000.0}, dish=Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, order=Orders{id=12, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}, Dish{id=8, name='Pork', category=Garnish, price=40.0, weight=250.0}, Dish{id=11, name='Cake', category=Dessert, price=45.0, weight=250.0}, Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}], tableNumber=4, dateOfOrder=2016-07-22 00:00:00.0, currentStatus=Open}, date=Sat Jul 23 17:13:51 EEST 2016}
2016-07-23 17:13:51 - Selecting the list of prepared dishes. 
2016-07-23 17:13:51 - Finding the dish by specific name: Fries
2016-07-23 17:13:51 - Finding the dish by specific name: Pasta
2016-07-23 17:13:51 - Adding the menu to the table. Menu{id=0, name='Summer_dinner', dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}]}
2016-07-23 17:13:51 - Adding the dishes to the menu. 
2016-07-23 17:13:51 - Finding the menu by specific name: Spring_morning
2016-07-23 17:13:51 - Finding the dish by specific name: Cake
2016-07-23 17:13:51 - Editing the menu 'Spring_morning'. 
2016-07-23 17:13:51 - Delete the dishes from the menu. 
2016-07-23 17:13:51 - Finding the menu by specific name: Spring_morning
2016-07-23 17:13:51 - Finding the dish by specific name: Cake
2016-07-23 17:13:51 - Editing the menu 'Spring_morning'. 
2016-07-23 17:13:51 - Selecting the list of Menu. 
2016-07-23 17:13:51 - Finding the ingredient by specific name: Potato
2016-07-23 17:13:51 - Adding the ingredient to the stock. Stock{id=0, ingredient=Ingredient{id=10, name='Potato'}, quantity=0}
2016-07-23 17:16:19 - MLog clients using slf4j logging.
2016-07-23 17:16:19 - Initializing c3p0-0.9.5.2 [built 08-December-2015 22:06:04 -0800; debug? true; trace: 10]
2016-07-23 17:16:20 - HHH000412: Hibernate Core {5.2.1.Final}
2016-07-23 17:16:20 - HHH000206: hibernate.properties not found
2016-07-23 17:16:20 - HHH000021: Bytecode provider name : javassist
2016-07-23 17:16:20 - HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2016-07-23 17:16:20 - Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, contextClassLoaderSource -> caller, dataSourceName -> 1hge0yu9i6ov80phwc0nd|5f058f00, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> org.postgresql.Driver, extensions -> {}, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, forceSynchronousCheckins -> false, forceUseNamedDriverClass -> false, identityToken -> 1hge0yu9i6ov80phwc0nd|5f058f00, idleConnectionTestPeriod -> 0, initialPoolSize -> 3, jdbcUrl -> jdbc:postgresql://localhost:5432/restaurant, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 0, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 15, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 1, numHelperThreads -> 3, preferredTestQuery -> null, privilegeSpawnedThreads -> false, properties -> {user=******, password=******}, propertyCycle -> 0, statementCacheNumDeferredCloseThreads -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, userOverrides -> {}, usesTraditionalReflectiveProxies -> false ]
2016-07-23 17:16:23 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQL94Dialect
2016-07-23 17:16:23 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2016-07-23 17:16:23 - HHH000270: Type registration [java.util.UUID] overrides previous : org.hibernate.type.UUIDBinaryType@2c7b5824
2016-07-23 17:16:25 - Selecting the list of employees. 
2016-07-23 17:16:25 - HHH000397: Using ASTQueryTranslatorFactory
2016-07-23 17:16:25 - Find the employee in the table by the name: Vlada
2016-07-23 17:16:25 - Selecting the list of employees. 
2016-07-23 17:16:25 - Selecting the dish list. 
2016-07-23 17:16:25 - Delete the dish from the table: Dish{id=0, name='Napoleon', category=Dessert, price=50.0, weight=300.0}
2016-07-23 17:16:25 - HHH000114: Handling transient entity in delete processing
2016-07-23 17:16:25 - Finding the dish by specific name: Pork
2016-07-23 17:16:25 - Selecting the dish list. 
2016-07-23 17:16:25 - Find the employee in the table by the name: Vlada
2016-07-23 17:16:25 - Finding the dish by specific name: Napoleon
2016-07-23 17:16:25 - Finding the dish by specific name: Fries
2016-07-23 17:16:25 - Finding the dish by specific name: Pasta
2016-07-23 17:16:25 - Adding the order to the table. Orders{id=0, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}], tableNumber=4, dateOfOrder=Sat Jul 23 17:16:25 EEST 2016, currentStatus=Open}
2016-07-23 17:16:25 - Delete the dish from the order. 
2016-07-23 17:16:25 - Finding the order by id 7
2016-07-23 17:16:25 - Finding the dish by specific name: Cake
2016-07-23 17:16:25 - Finding the dish by specific name: Pork
2016-07-23 17:16:25 - Editing the order # 7
2016-07-23 17:16:25 - Finding the order by id 1
2016-07-23 17:16:25 - [Error]: This order has already been closed. 
2016-07-23 17:16:25 - Finding the order by id 3
2016-07-23 17:16:25 - [Error]: This order has already been closed. 
2016-07-23 17:16:25 - Selecting the list of orders. 
2016-07-23 17:16:25 - Find the employee in the table by the name: Aleksandr
2016-07-23 17:16:25 - Finding the dish by specific name: Napoleon
2016-07-23 17:16:25 - Finding the order by id 12
2016-07-23 17:16:25 - Adding the prepared dish to the table. PreparedDishes{id=0, cook=Employee{id=4, surname='Ivanov', name='Aleksandr', dateOfBirth='24-10-1980', phoneNumber='063-151-22-44', position='Cook', salary=8000.0}, dish=Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, order=Orders{id=12, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}, Dish{id=8, name='Pork', category=Garnish, price=40.0, weight=250.0}, Dish{id=11, name='Cake', category=Dessert, price=45.0, weight=250.0}, Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}], tableNumber=4, dateOfOrder=2016-07-22 00:00:00.0, currentStatus=Open}, date=Sat Jul 23 17:16:25 EEST 2016}
2016-07-23 17:16:25 - Selecting the list of prepared dishes. 
2016-07-23 17:16:25 - Finding the dish by specific name: Fries
2016-07-23 17:16:25 - Finding the dish by specific name: Pasta
2016-07-23 17:16:25 - Adding the menu to the table. Menu{id=0, name='Summer_dinner', dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}]}
2016-07-23 17:16:25 - Adding the dishes to the menu. 
2016-07-23 17:16:26 - Finding the menu by specific name: Spring_morning
2016-07-23 17:16:26 - Finding the dish by specific name: Cake
2016-07-23 17:16:26 - Editing the menu 'Spring_morning'. 
2016-07-23 17:16:26 - Delete the dishes from the menu. 
2016-07-23 17:16:26 - Finding the menu by specific name: Spring_morning
2016-07-23 17:16:26 - Finding the dish by specific name: Cake
2016-07-23 17:16:26 - Editing the menu 'Spring_morning'. 
2016-07-23 17:16:26 - Selecting the list of Menu. 
2016-07-23 17:16:26 - Finding the ingredient by specific name: Potato
2016-07-23 17:16:26 - Adding the ingredient to the stock. Stock{id=0, ingredient=Ingredient{id=10, name='Potato'}, quantity=25}
2016-07-23 17:21:05 - MLog clients using slf4j logging.
2016-07-23 17:21:05 - Initializing c3p0-0.9.5.2 [built 08-December-2015 22:06:04 -0800; debug? true; trace: 10]
2016-07-23 17:21:06 - HHH000412: Hibernate Core {5.2.1.Final}
2016-07-23 17:21:06 - HHH000206: hibernate.properties not found
2016-07-23 17:21:06 - HHH000021: Bytecode provider name : javassist
2016-07-23 17:21:06 - HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2016-07-23 17:21:06 - Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, contextClassLoaderSource -> caller, dataSourceName -> 1hge0yu9i6p1cii1mvtlpc|5f058f00, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> org.postgresql.Driver, extensions -> {}, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, forceSynchronousCheckins -> false, forceUseNamedDriverClass -> false, identityToken -> 1hge0yu9i6p1cii1mvtlpc|5f058f00, idleConnectionTestPeriod -> 0, initialPoolSize -> 3, jdbcUrl -> jdbc:postgresql://localhost:5432/restaurant, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 0, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 15, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 1, numHelperThreads -> 3, preferredTestQuery -> null, privilegeSpawnedThreads -> false, properties -> {user=******, password=******}, propertyCycle -> 0, statementCacheNumDeferredCloseThreads -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, userOverrides -> {}, usesTraditionalReflectiveProxies -> false ]
2016-07-23 17:21:09 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQL94Dialect
2016-07-23 17:21:09 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2016-07-23 17:21:09 - HHH000270: Type registration [java.util.UUID] overrides previous : org.hibernate.type.UUIDBinaryType@2c7b5824
2016-07-23 17:21:10 - Selecting the list of employees. 
2016-07-23 17:21:10 - HHH000397: Using ASTQueryTranslatorFactory
2016-07-23 17:21:11 - Find the employee in the table by the name: Vlada
2016-07-23 17:21:11 - Selecting the list of employees. 
2016-07-23 17:21:11 - Selecting the dish list. 
2016-07-23 17:21:11 - Delete the dish from the table: Dish{id=0, name='Napoleon', category=Dessert, price=50.0, weight=300.0}
2016-07-23 17:21:11 - HHH000114: Handling transient entity in delete processing
2016-07-23 17:21:11 - Finding the dish by specific name: Pork
2016-07-23 17:21:11 - Selecting the dish list. 
2016-07-23 17:21:11 - Find the employee in the table by the name: Vlada
2016-07-23 17:21:11 - Finding the dish by specific name: Napoleon
2016-07-23 17:21:11 - Finding the dish by specific name: Fries
2016-07-23 17:21:11 - Finding the dish by specific name: Pasta
2016-07-23 17:21:11 - Adding the order to the table. Orders{id=0, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}], tableNumber=4, dateOfOrder=Sat Jul 23 17:21:11 EEST 2016, currentStatus=Open}
2016-07-23 17:21:11 - Delete the dish from the order. 
2016-07-23 17:21:11 - Finding the order by id 7
2016-07-23 17:21:11 - Finding the dish by specific name: Cake
2016-07-23 17:21:11 - Finding the dish by specific name: Pork
2016-07-23 17:21:11 - Editing the order # 7
2016-07-23 17:21:11 - Finding the order by id 1
2016-07-23 17:21:11 - [Error]: This order has already been closed. 
2016-07-23 17:21:11 - Finding the order by id 3
2016-07-23 17:21:11 - [Error]: This order has already been closed. 
2016-07-23 17:21:11 - Selecting the list of orders. 
2016-07-23 17:21:11 - Find the employee in the table by the name: Aleksandr
2016-07-23 17:21:11 - Finding the dish by specific name: Napoleon
2016-07-23 17:21:11 - Finding the order by id 12
2016-07-23 17:21:11 - Adding the prepared dish to the table. PreparedDishes{id=0, cook=Employee{id=4, surname='Ivanov', name='Aleksandr', dateOfBirth='24-10-1980', phoneNumber='063-151-22-44', position='Cook', salary=8000.0}, dish=Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, order=Orders{id=12, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}, Dish{id=8, name='Pork', category=Garnish, price=40.0, weight=250.0}, Dish{id=11, name='Cake', category=Dessert, price=45.0, weight=250.0}, Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}], tableNumber=4, dateOfOrder=2016-07-22 00:00:00.0, currentStatus=Open}, date=Sat Jul 23 17:21:11 EEST 2016}
2016-07-23 17:21:11 - Selecting the list of prepared dishes. 
2016-07-23 17:21:11 - Finding the dish by specific name: Fries
2016-07-23 17:21:11 - Finding the dish by specific name: Pasta
2016-07-23 17:21:11 - Adding the menu to the table. Menu{id=0, name='Summer_dinner', dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}]}
2016-07-23 17:21:11 - Adding the dishes to the menu. 
2016-07-23 17:21:11 - Finding the menu by specific name: Spring_morning
2016-07-23 17:21:11 - Finding the dish by specific name: Cake
2016-07-23 17:21:11 - Editing the menu 'Spring_morning'. 
2016-07-23 17:21:11 - Delete the dishes from the menu. 
2016-07-23 17:21:11 - Finding the menu by specific name: Spring_morning
2016-07-23 17:21:11 - Finding the dish by specific name: Cake
2016-07-23 17:21:11 - Editing the menu 'Spring_morning'. 
2016-07-23 17:21:11 - Selecting the list of Menu. 
2016-07-23 17:21:11 - Finding the ingredient by specific name: Potato
2016-07-23 17:21:11 - Adding the ingredient to the stock. Stock{id=0, ingredient=Ingredient{id=10, name='Potato'}, quantity=25}
2016-07-23 17:25:17 - MLog clients using slf4j logging.
2016-07-23 17:25:17 - Initializing c3p0-0.9.5.2 [built 08-December-2015 22:06:04 -0800; debug? true; trace: 10]
2016-07-23 17:25:18 - HHH000412: Hibernate Core {5.2.1.Final}
2016-07-23 17:25:18 - HHH000206: hibernate.properties not found
2016-07-23 17:25:18 - HHH000021: Bytecode provider name : javassist
2016-07-23 17:25:18 - HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2016-07-23 17:25:18 - Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, contextClassLoaderSource -> caller, dataSourceName -> 1hge0yu9i6p6r5e1gu6oj|5f058f00, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> org.postgresql.Driver, extensions -> {}, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, forceSynchronousCheckins -> false, forceUseNamedDriverClass -> false, identityToken -> 1hge0yu9i6p6r5e1gu6oj|5f058f00, idleConnectionTestPeriod -> 0, initialPoolSize -> 3, jdbcUrl -> jdbc:postgresql://localhost:5432/restaurant, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 0, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 15, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 1, numHelperThreads -> 3, preferredTestQuery -> null, privilegeSpawnedThreads -> false, properties -> {user=******, password=******}, propertyCycle -> 0, statementCacheNumDeferredCloseThreads -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, userOverrides -> {}, usesTraditionalReflectiveProxies -> false ]
2016-07-23 17:25:21 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQL94Dialect
2016-07-23 17:25:21 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2016-07-23 17:25:21 - HHH000270: Type registration [java.util.UUID] overrides previous : org.hibernate.type.UUIDBinaryType@2c7b5824
2016-07-23 17:25:23 - Selecting the list of employees. 
2016-07-23 17:25:23 - HHH000397: Using ASTQueryTranslatorFactory
2016-07-23 17:25:23 - Find the employee in the table by the name: Vlada
2016-07-23 17:25:23 - Selecting the list of employees. 
2016-07-23 17:25:23 - Selecting the dish list. 
2016-07-23 17:25:23 - Delete the dish from the table: Dish{id=0, name='Napoleon', category=Dessert, price=50.0, weight=300.0}
2016-07-23 17:25:23 - HHH000114: Handling transient entity in delete processing
2016-07-23 17:25:23 - Finding the dish by specific name: Pork
2016-07-23 17:25:23 - Selecting the dish list. 
2016-07-23 17:25:23 - Find the employee in the table by the name: Vlada
2016-07-23 17:25:23 - Finding the dish by specific name: Napoleon
2016-07-23 17:25:23 - Finding the dish by specific name: Fries
2016-07-23 17:25:23 - Finding the dish by specific name: Pasta
2016-07-23 17:25:23 - Adding the order to the table. Orders{id=0, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}], tableNumber=4, dateOfOrder=Sat Jul 23 17:25:23 EEST 2016, currentStatus=Open}
2016-07-23 17:25:23 - Delete the dish from the order. 
2016-07-23 17:25:23 - Finding the order by id 7
2016-07-23 17:25:23 - Finding the dish by specific name: Cake
2016-07-23 17:25:23 - Finding the dish by specific name: Pork
2016-07-23 17:25:23 - Editing the order # 7
2016-07-23 17:25:23 - Finding the order by id 1
2016-07-23 17:25:23 - [Error]: This order has already been closed. 
2016-07-23 17:25:23 - Finding the order by id 3
2016-07-23 17:25:23 - [Error]: This order has already been closed. 
2016-07-23 17:25:23 - Selecting the list of orders. 
2016-07-23 17:25:23 - Find the employee in the table by the name: Aleksandr
2016-07-23 17:25:23 - Finding the dish by specific name: Napoleon
2016-07-23 17:25:23 - Finding the order by id 12
2016-07-23 17:25:23 - Adding the prepared dish to the table. PreparedDishes{id=0, cook=Employee{id=4, surname='Ivanov', name='Aleksandr', dateOfBirth='24-10-1980', phoneNumber='063-151-22-44', position='Cook', salary=8000.0}, dish=Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, order=Orders{id=12, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}, Dish{id=8, name='Pork', category=Garnish, price=40.0, weight=250.0}, Dish{id=11, name='Cake', category=Dessert, price=45.0, weight=250.0}, Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}], tableNumber=4, dateOfOrder=2016-07-22 00:00:00.0, currentStatus=Open}, date=Sat Jul 23 17:25:23 EEST 2016}
2016-07-23 17:25:23 - Selecting the list of prepared dishes. 
2016-07-23 17:25:23 - Finding the dish by specific name: Fries
2016-07-23 17:25:23 - Finding the dish by specific name: Pasta
2016-07-23 17:25:23 - Adding the menu to the table. Menu{id=0, name='Summer_dinner', dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}]}
2016-07-23 17:25:23 - Adding the dishes to the menu. 
2016-07-23 17:25:23 - Finding the menu by specific name: Spring_morning
2016-07-23 17:25:23 - Finding the dish by specific name: Cake
2016-07-23 17:25:23 - Editing the menu 'Spring_morning'. 
2016-07-23 17:25:23 - Delete the dishes from the menu. 
2016-07-23 17:25:23 - Finding the menu by specific name: Spring_morning
2016-07-23 17:25:23 - Finding the dish by specific name: Cake
2016-07-23 17:25:23 - Editing the menu 'Spring_morning'. 
2016-07-23 17:25:23 - Selecting the list of Menu. 
2016-07-23 17:25:23 - Finding the ingredient by specific name: Tomato
2016-07-23 17:25:47 - MLog clients using slf4j logging.
2016-07-23 17:25:47 - Initializing c3p0-0.9.5.2 [built 08-December-2015 22:06:04 -0800; debug? true; trace: 10]
2016-07-23 17:25:47 - HHH000412: Hibernate Core {5.2.1.Final}
2016-07-23 17:25:47 - HHH000206: hibernate.properties not found
2016-07-23 17:25:47 - HHH000021: Bytecode provider name : javassist
2016-07-23 17:25:47 - HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2016-07-23 17:25:47 - Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, contextClassLoaderSource -> caller, dataSourceName -> 1hge0yu9i6p7dwu9ybduy|5f058f00, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> org.postgresql.Driver, extensions -> {}, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, forceSynchronousCheckins -> false, forceUseNamedDriverClass -> false, identityToken -> 1hge0yu9i6p7dwu9ybduy|5f058f00, idleConnectionTestPeriod -> 0, initialPoolSize -> 3, jdbcUrl -> jdbc:postgresql://localhost:5432/restaurant, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 0, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 15, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 1, numHelperThreads -> 3, preferredTestQuery -> null, privilegeSpawnedThreads -> false, properties -> {user=******, password=******}, propertyCycle -> 0, statementCacheNumDeferredCloseThreads -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, userOverrides -> {}, usesTraditionalReflectiveProxies -> false ]
2016-07-23 17:25:50 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQL94Dialect
2016-07-23 17:25:51 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2016-07-23 17:25:51 - HHH000270: Type registration [java.util.UUID] overrides previous : org.hibernate.type.UUIDBinaryType@2c7b5824
2016-07-23 17:25:52 - Selecting the list of employees. 
2016-07-23 17:25:52 - HHH000397: Using ASTQueryTranslatorFactory
2016-07-23 17:25:52 - Find the employee in the table by the name: Vlada
2016-07-23 17:25:52 - Selecting the list of employees. 
2016-07-23 17:25:52 - Selecting the dish list. 
2016-07-23 17:25:52 - Delete the dish from the table: Dish{id=0, name='Napoleon', category=Dessert, price=50.0, weight=300.0}
2016-07-23 17:25:52 - HHH000114: Handling transient entity in delete processing
2016-07-23 17:25:52 - Finding the dish by specific name: Pork
2016-07-23 17:25:52 - Selecting the dish list. 
2016-07-23 17:25:52 - Find the employee in the table by the name: Vlada
2016-07-23 17:25:52 - Finding the dish by specific name: Napoleon
2016-07-23 17:25:52 - Finding the dish by specific name: Fries
2016-07-23 17:25:52 - Finding the dish by specific name: Pasta
2016-07-23 17:25:52 - Adding the order to the table. Orders{id=0, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}], tableNumber=4, dateOfOrder=Sat Jul 23 17:25:52 EEST 2016, currentStatus=Open}
2016-07-23 17:25:52 - Delete the dish from the order. 
2016-07-23 17:25:52 - Finding the order by id 7
2016-07-23 17:25:52 - Finding the dish by specific name: Cake
2016-07-23 17:25:52 - Finding the dish by specific name: Pork
2016-07-23 17:25:52 - Editing the order # 7
2016-07-23 17:25:52 - Finding the order by id 1
2016-07-23 17:25:52 - [Error]: This order has already been closed. 
2016-07-23 17:25:52 - Finding the order by id 3
2016-07-23 17:25:52 - [Error]: This order has already been closed. 
2016-07-23 17:25:52 - Selecting the list of orders. 
2016-07-23 17:25:52 - Find the employee in the table by the name: Aleksandr
2016-07-23 17:25:52 - Finding the dish by specific name: Napoleon
2016-07-23 17:25:52 - Finding the order by id 12
2016-07-23 17:25:52 - Adding the prepared dish to the table. PreparedDishes{id=0, cook=Employee{id=4, surname='Ivanov', name='Aleksandr', dateOfBirth='24-10-1980', phoneNumber='063-151-22-44', position='Cook', salary=8000.0}, dish=Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, order=Orders{id=12, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}, Dish{id=8, name='Pork', category=Garnish, price=40.0, weight=250.0}, Dish{id=11, name='Cake', category=Dessert, price=45.0, weight=250.0}, Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}], tableNumber=4, dateOfOrder=2016-07-22 00:00:00.0, currentStatus=Open}, date=Sat Jul 23 17:25:52 EEST 2016}
2016-07-23 17:25:52 - Selecting the list of prepared dishes. 
2016-07-23 17:25:53 - Finding the dish by specific name: Fries
2016-07-23 17:25:53 - Finding the dish by specific name: Pasta
2016-07-23 17:25:53 - Adding the menu to the table. Menu{id=0, name='Summer_dinner', dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}]}
2016-07-23 17:25:53 - Adding the dishes to the menu. 
2016-07-23 17:25:53 - Finding the menu by specific name: Spring_morning
2016-07-23 17:25:53 - Finding the dish by specific name: Cake
2016-07-23 17:25:53 - Editing the menu 'Spring_morning'. 
2016-07-23 17:25:53 - Delete the dishes from the menu. 
2016-07-23 17:25:53 - Finding the menu by specific name: Spring_morning
2016-07-23 17:25:53 - Finding the dish by specific name: Cake
2016-07-23 17:25:53 - Editing the menu 'Spring_morning'. 
2016-07-23 17:25:53 - Selecting the list of Menu. 
2016-07-23 17:25:53 - Selecting the list of ingredients. 
2016-07-23 17:29:48 - MLog clients using slf4j logging.
2016-07-23 17:29:48 - Initializing c3p0-0.9.5.2 [built 08-December-2015 22:06:04 -0800; debug? true; trace: 10]
2016-07-23 17:29:48 - HHH000412: Hibernate Core {5.2.1.Final}
2016-07-23 17:29:48 - HHH000206: hibernate.properties not found
2016-07-23 17:29:48 - HHH000021: Bytecode provider name : javassist
2016-07-23 17:29:48 - HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2016-07-23 17:29:49 - Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, contextClassLoaderSource -> caller, dataSourceName -> 1hge0yu9i6pcjyj1lnwt7a|5f058f00, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> org.postgresql.Driver, extensions -> {}, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, forceSynchronousCheckins -> false, forceUseNamedDriverClass -> false, identityToken -> 1hge0yu9i6pcjyj1lnwt7a|5f058f00, idleConnectionTestPeriod -> 0, initialPoolSize -> 3, jdbcUrl -> jdbc:postgresql://localhost:5432/restaurant, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 0, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 15, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 1, numHelperThreads -> 3, preferredTestQuery -> null, privilegeSpawnedThreads -> false, properties -> {user=******, password=******}, propertyCycle -> 0, statementCacheNumDeferredCloseThreads -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, userOverrides -> {}, usesTraditionalReflectiveProxies -> false ]
2016-07-23 17:29:52 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQL94Dialect
2016-07-23 17:29:52 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2016-07-23 17:29:52 - HHH000270: Type registration [java.util.UUID] overrides previous : org.hibernate.type.UUIDBinaryType@2c7b5824
2016-07-23 17:29:53 - Selecting the list of employees. 
2016-07-23 17:29:53 - HHH000397: Using ASTQueryTranslatorFactory
2016-07-23 17:29:54 - Find the employee in the table by the name: Vlada
2016-07-23 17:29:54 - Selecting the list of employees. 
2016-07-23 17:29:54 - Selecting the dish list. 
2016-07-23 17:29:54 - Delete the dish from the table: Dish{id=0, name='Napoleon', category=Dessert, price=50.0, weight=300.0}
2016-07-23 17:29:54 - HHH000114: Handling transient entity in delete processing
2016-07-23 17:29:54 - Finding the dish by specific name: Pork
2016-07-23 17:29:54 - Selecting the dish list. 
2016-07-23 17:29:54 - Find the employee in the table by the name: Vlada
2016-07-23 17:29:54 - Finding the dish by specific name: Napoleon
2016-07-23 17:29:54 - Finding the dish by specific name: Fries
2016-07-23 17:29:54 - Finding the dish by specific name: Pasta
2016-07-23 17:29:54 - Adding the order to the table. Orders{id=0, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}], tableNumber=4, dateOfOrder=Sat Jul 23 17:29:54 EEST 2016, currentStatus=Open}
2016-07-23 17:29:54 - Delete the dish from the order. 
2016-07-23 17:29:54 - Finding the order by id 7
2016-07-23 17:29:54 - Finding the dish by specific name: Cake
2016-07-23 17:29:54 - Finding the dish by specific name: Pork
2016-07-23 17:29:54 - Editing the order # 7
2016-07-23 17:29:54 - Finding the order by id 1
2016-07-23 17:29:54 - [Error]: This order has already been closed. 
2016-07-23 17:29:54 - Finding the order by id 3
2016-07-23 17:29:54 - [Error]: This order has already been closed. 
2016-07-23 17:29:54 - Selecting the list of orders. 
2016-07-23 17:29:54 - Find the employee in the table by the name: Aleksandr
2016-07-23 17:29:54 - Finding the dish by specific name: Napoleon
2016-07-23 17:29:54 - Finding the order by id 12
2016-07-23 17:29:54 - Adding the prepared dish to the table. PreparedDishes{id=0, cook=Employee{id=4, surname='Ivanov', name='Aleksandr', dateOfBirth='24-10-1980', phoneNumber='063-151-22-44', position='Cook', salary=8000.0}, dish=Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, order=Orders{id=12, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}, Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, Dish{id=11, name='Cake', category=Dessert, price=45.0, weight=250.0}, Dish{id=8, name='Pork', category=Garnish, price=40.0, weight=250.0}], tableNumber=4, dateOfOrder=2016-07-22 00:00:00.0, currentStatus=Open}, date=Sat Jul 23 17:29:54 EEST 2016}
2016-07-23 17:29:54 - Selecting the list of prepared dishes. 
2016-07-23 17:29:54 - Finding the dish by specific name: Fries
2016-07-23 17:29:54 - Finding the dish by specific name: Pasta
2016-07-23 17:29:54 - Adding the menu to the table. Menu{id=0, name='Summer_dinner', dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}]}
2016-07-23 17:29:54 - Adding the dishes to the menu. 
2016-07-23 17:29:54 - Finding the menu by specific name: Spring_morning
2016-07-23 17:29:54 - Finding the dish by specific name: Cake
2016-07-23 17:29:54 - Editing the menu 'Spring_morning'. 
2016-07-23 17:29:54 - Delete the dishes from the menu. 
2016-07-23 17:29:54 - Finding the menu by specific name: Spring_morning
2016-07-23 17:29:54 - Finding the dish by specific name: Cake
2016-07-23 17:29:54 - Editing the menu 'Spring_morning'. 
2016-07-23 17:29:54 - Selecting the list of Menu. 
2016-07-23 17:29:54 - Finding the ingredient by specific name: Potato
2016-07-23 17:29:54 - Adding the ingredient to the stock. Stock{id=0, ingredient=Ingredient{id=10, name='Potato'}, quantity=25}
2016-07-23 17:29:54 - Finding the ingredient by specific name: Potato
2016-07-23 17:29:54 -  Invalid path: 's.name'
2016-07-23 17:29:54 -  Invalid path: 's.name'
org.hibernate.hql.internal.ast.InvalidPathException: Invalid path: 's.name'
	at org.hibernate.hql.internal.ast.util.LiteralProcessor.lookupConstant(LiteralProcessor.java:114)
	at org.hibernate.hql.internal.ast.tree.DotNode.resolve(DotNode.java:214)
	at org.hibernate.hql.internal.ast.tree.FromReferenceNode.resolve(FromReferenceNode.java:109)
	at org.hibernate.hql.internal.ast.tree.FromReferenceNode.resolve(FromReferenceNode.java:104)
	at org.hibernate.hql.internal.ast.HqlSqlWalker.resolve(HqlSqlWalker.java:1013)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.expr(HqlSqlBaseWalker.java:1286)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.exprOrSubquery(HqlSqlBaseWalker.java:4699)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.comparisonExpr(HqlSqlBaseWalker.java:4313)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2134)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.whereClause(HqlSqlBaseWalker.java:813)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.query(HqlSqlBaseWalker.java:607)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.selectStatement(HqlSqlBaseWalker.java:311)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.statement(HqlSqlBaseWalker.java:259)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:262)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:190)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.compile(QueryTranslatorImpl.java:142)
	at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:115)
	at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:77)
	at org.hibernate.engine.query.spi.QueryPlanCache.getHQLQueryPlan(QueryPlanCache.java:152)
	at org.hibernate.internal.AbstractSharedSessionContract.getQueryPlan(AbstractSharedSessionContract.java:521)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:623)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:101)
	at databases.dao.hibernate.HStockDao.findByName(HStockDao.java:45)
	at databases.dao.hibernate.HStockDao$$FastClassBySpringCGLIB$$74aa4c76.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:720)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:281)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:655)
	at databases.dao.hibernate.HStockDao$$EnhancerBySpringCGLIB$$3317803f.findByName(<generated>)
	at databases.controllers.StockController.deleteIngredient(StockController.java:28)
	at databases.controllers.StockController$$FastClassBySpringCGLIB$$45f0e905.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:720)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:281)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:655)
	at databases.controllers.StockController$$EnhancerBySpringCGLIB$$5dce274c.deleteIngredient(<generated>)
	at databases.Main.start(Main.java:77)
	at databases.Main.main(Main.java:26)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)
2016-07-23 17:29:54 - <AST>:0:0: unexpected end of subtree
2016-07-23 17:29:54 - <AST>:0:0: unexpected end of subtree
antlr.NoViableAltException: unexpected end of subtree
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.expr(HqlSqlBaseWalker.java:1386)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.comparisonExpr(HqlSqlBaseWalker.java:4316)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2134)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.whereClause(HqlSqlBaseWalker.java:813)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.query(HqlSqlBaseWalker.java:607)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.selectStatement(HqlSqlBaseWalker.java:311)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.statement(HqlSqlBaseWalker.java:259)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:262)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:190)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.compile(QueryTranslatorImpl.java:142)
	at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:115)
	at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:77)
	at org.hibernate.engine.query.spi.QueryPlanCache.getHQLQueryPlan(QueryPlanCache.java:152)
	at org.hibernate.internal.AbstractSharedSessionContract.getQueryPlan(AbstractSharedSessionContract.java:521)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:623)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:101)
	at databases.dao.hibernate.HStockDao.findByName(HStockDao.java:45)
	at databases.dao.hibernate.HStockDao$$FastClassBySpringCGLIB$$74aa4c76.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:720)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:281)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:655)
	at databases.dao.hibernate.HStockDao$$EnhancerBySpringCGLIB$$3317803f.findByName(<generated>)
	at databases.controllers.StockController.deleteIngredient(StockController.java:28)
	at databases.controllers.StockController$$FastClassBySpringCGLIB$$45f0e905.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:720)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:281)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:655)
	at databases.controllers.StockController$$EnhancerBySpringCGLIB$$5dce274c.deleteIngredient(<generated>)
	at databases.Main.start(Main.java:77)
	at databases.Main.main(Main.java:26)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)
2016-07-23 17:29:54 -  left-hand operand of a binary operator was null
2016-07-23 17:29:54 -  left-hand operand of a binary operator was null
antlr.SemanticException: left-hand operand of a binary operator was null
	at org.hibernate.hql.internal.ast.tree.BinaryLogicOperatorNode.initialize(BinaryLogicOperatorNode.java:40)
	at org.hibernate.hql.internal.ast.HqlSqlWalker.prepareLogicOperator(HqlSqlWalker.java:1369)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.comparisonExpr(HqlSqlBaseWalker.java:4643)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.logicalExpr(HqlSqlBaseWalker.java:2134)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.whereClause(HqlSqlBaseWalker.java:813)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.query(HqlSqlBaseWalker.java:607)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.selectStatement(HqlSqlBaseWalker.java:311)
	at org.hibernate.hql.internal.antlr.HqlSqlBaseWalker.statement(HqlSqlBaseWalker.java:259)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.analyze(QueryTranslatorImpl.java:262)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.doCompile(QueryTranslatorImpl.java:190)
	at org.hibernate.hql.internal.ast.QueryTranslatorImpl.compile(QueryTranslatorImpl.java:142)
	at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:115)
	at org.hibernate.engine.query.spi.HQLQueryPlan.<init>(HQLQueryPlan.java:77)
	at org.hibernate.engine.query.spi.QueryPlanCache.getHQLQueryPlan(QueryPlanCache.java:152)
	at org.hibernate.internal.AbstractSharedSessionContract.getQueryPlan(AbstractSharedSessionContract.java:521)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:623)
	at org.hibernate.internal.AbstractSharedSessionContract.createQuery(AbstractSharedSessionContract.java:101)
	at databases.dao.hibernate.HStockDao.findByName(HStockDao.java:45)
	at databases.dao.hibernate.HStockDao$$FastClassBySpringCGLIB$$74aa4c76.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:720)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:281)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:655)
	at databases.dao.hibernate.HStockDao$$EnhancerBySpringCGLIB$$3317803f.findByName(<generated>)
	at databases.controllers.StockController.deleteIngredient(StockController.java:28)
	at databases.controllers.StockController$$FastClassBySpringCGLIB$$45f0e905.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:720)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)
	at org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:281)
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:655)
	at databases.controllers.StockController$$EnhancerBySpringCGLIB$$5dce274c.deleteIngredient(<generated>)
	at databases.Main.start(Main.java:77)
	at databases.Main.main(Main.java:26)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:497)
	at com.intellij.rt.execution.application.AppMain.main(AppMain.java:144)
2016-07-23 17:32:10 - MLog clients using slf4j logging.
2016-07-23 17:32:10 - Initializing c3p0-0.9.5.2 [built 08-December-2015 22:06:04 -0800; debug? true; trace: 10]
2016-07-23 17:32:11 - HHH000412: Hibernate Core {5.2.1.Final}
2016-07-23 17:32:11 - HHH000206: hibernate.properties not found
2016-07-23 17:32:11 - HHH000021: Bytecode provider name : javassist
2016-07-23 17:32:11 - HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2016-07-23 17:32:11 - Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, contextClassLoaderSource -> caller, dataSourceName -> 1hge0yu9i6pflvofm6i7m|5f058f00, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> org.postgresql.Driver, extensions -> {}, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, forceSynchronousCheckins -> false, forceUseNamedDriverClass -> false, identityToken -> 1hge0yu9i6pflvofm6i7m|5f058f00, idleConnectionTestPeriod -> 0, initialPoolSize -> 3, jdbcUrl -> jdbc:postgresql://localhost:5432/restaurant, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 0, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 15, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 1, numHelperThreads -> 3, preferredTestQuery -> null, privilegeSpawnedThreads -> false, properties -> {user=******, password=******}, propertyCycle -> 0, statementCacheNumDeferredCloseThreads -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, userOverrides -> {}, usesTraditionalReflectiveProxies -> false ]
2016-07-23 17:32:14 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQL94Dialect
2016-07-23 17:32:14 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2016-07-23 17:32:14 - HHH000270: Type registration [java.util.UUID] overrides previous : org.hibernate.type.UUIDBinaryType@2c7b5824
2016-07-23 17:32:15 - Selecting the list of employees. 
2016-07-23 17:32:15 - HHH000397: Using ASTQueryTranslatorFactory
2016-07-23 17:32:16 - Find the employee in the table by the name: Vlada
2016-07-23 17:32:16 - Selecting the list of employees. 
2016-07-23 17:32:16 - Selecting the dish list. 
2016-07-23 17:32:16 - Delete the dish from the table: Dish{id=0, name='Napoleon', category=Dessert, price=50.0, weight=300.0}
2016-07-23 17:32:16 - HHH000114: Handling transient entity in delete processing
2016-07-23 17:32:16 - Finding the dish by specific name: Pork
2016-07-23 17:32:16 - Selecting the dish list. 
2016-07-23 17:32:16 - Find the employee in the table by the name: Vlada
2016-07-23 17:32:16 - Finding the dish by specific name: Napoleon
2016-07-23 17:32:16 - Finding the dish by specific name: Fries
2016-07-23 17:32:16 - Finding the dish by specific name: Pasta
2016-07-23 17:32:16 - Adding the order to the table. Orders{id=0, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}], tableNumber=4, dateOfOrder=Sat Jul 23 17:32:16 EEST 2016, currentStatus=Open}
2016-07-23 17:32:16 - Delete the dish from the order. 
2016-07-23 17:32:16 - Finding the order by id 7
2016-07-23 17:32:16 - Finding the dish by specific name: Cake
2016-07-23 17:32:16 - Finding the dish by specific name: Pork
2016-07-23 17:32:16 - Editing the order # 7
2016-07-23 17:32:16 - Finding the order by id 1
2016-07-23 17:32:16 - [Error]: This order has already been closed. 
2016-07-23 17:32:16 - Finding the order by id 3
2016-07-23 17:32:16 - [Error]: This order has already been closed. 
2016-07-23 17:32:16 - Selecting the list of orders. 
2016-07-23 17:32:16 - Find the employee in the table by the name: Aleksandr
2016-07-23 17:32:16 - Finding the dish by specific name: Napoleon
2016-07-23 17:32:16 - Finding the order by id 12
2016-07-23 17:32:16 - Adding the prepared dish to the table. PreparedDishes{id=0, cook=Employee{id=4, surname='Ivanov', name='Aleksandr', dateOfBirth='24-10-1980', phoneNumber='063-151-22-44', position='Cook', salary=8000.0}, dish=Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, order=Orders{id=12, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}, Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, Dish{id=11, name='Cake', category=Dessert, price=45.0, weight=250.0}, Dish{id=8, name='Pork', category=Garnish, price=40.0, weight=250.0}], tableNumber=4, dateOfOrder=2016-07-22 00:00:00.0, currentStatus=Open}, date=Sat Jul 23 17:32:16 EEST 2016}
2016-07-23 17:32:16 - Selecting the list of prepared dishes. 
2016-07-23 17:32:16 - Finding the dish by specific name: Fries
2016-07-23 17:32:16 - Finding the dish by specific name: Pasta
2016-07-23 17:32:16 - Adding the menu to the table. Menu{id=0, name='Summer_dinner', dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}]}
2016-07-23 17:32:16 - Adding the dishes to the menu. 
2016-07-23 17:32:16 - Finding the menu by specific name: Spring_morning
2016-07-23 17:32:16 - Finding the dish by specific name: Cake
2016-07-23 17:32:16 - Editing the menu 'Spring_morning'. 
2016-07-23 17:32:16 - Delete the dishes from the menu. 
2016-07-23 17:32:16 - Finding the menu by specific name: Spring_morning
2016-07-23 17:32:16 - Finding the dish by specific name: Cake
2016-07-23 17:32:16 - Editing the menu 'Spring_morning'. 
2016-07-23 17:32:16 - Selecting the list of Menu. 
2016-07-23 17:32:16 - Finding the ingredient by specific name: Potato
2016-07-23 17:32:16 - Adding the ingredient to the stock. Stock{id=0, ingredient=Ingredient{id=10, name='Potato'}, quantity=25}
2016-07-23 17:32:16 - Finding the ingredient by specific name: Potato
2016-07-23 17:35:04 - MLog clients using slf4j logging.
2016-07-23 17:35:04 - Initializing c3p0-0.9.5.2 [built 08-December-2015 22:06:04 -0800; debug? true; trace: 10]
2016-07-23 17:35:04 - HHH000412: Hibernate Core {5.2.1.Final}
2016-07-23 17:35:04 - HHH000206: hibernate.properties not found
2016-07-23 17:35:04 - HHH000021: Bytecode provider name : javassist
2016-07-23 17:35:04 - HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2016-07-23 17:35:05 - Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, contextClassLoaderSource -> caller, dataSourceName -> 1hge0yu9i6pjbpf10jti5u|5f058f00, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> org.postgresql.Driver, extensions -> {}, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, forceSynchronousCheckins -> false, forceUseNamedDriverClass -> false, identityToken -> 1hge0yu9i6pjbpf10jti5u|5f058f00, idleConnectionTestPeriod -> 0, initialPoolSize -> 3, jdbcUrl -> jdbc:postgresql://localhost:5432/restaurant, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 0, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 15, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 1, numHelperThreads -> 3, preferredTestQuery -> null, privilegeSpawnedThreads -> false, properties -> {user=******, password=******}, propertyCycle -> 0, statementCacheNumDeferredCloseThreads -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, userOverrides -> {}, usesTraditionalReflectiveProxies -> false ]
2016-07-23 17:35:07 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQL94Dialect
2016-07-23 17:35:08 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2016-07-23 17:35:08 - HHH000270: Type registration [java.util.UUID] overrides previous : org.hibernate.type.UUIDBinaryType@2c7b5824
2016-07-23 17:35:09 - Selecting the list of employees. 
2016-07-23 17:35:09 - HHH000397: Using ASTQueryTranslatorFactory
2016-07-23 17:35:09 - Find the employee in the table by the name: Vlada
2016-07-23 17:35:09 - Selecting the list of employees. 
2016-07-23 17:35:09 - Selecting the dish list. 
2016-07-23 17:35:09 - Delete the dish from the table: Dish{id=0, name='Napoleon', category=Dessert, price=50.0, weight=300.0}
2016-07-23 17:35:09 - HHH000114: Handling transient entity in delete processing
2016-07-23 17:35:09 - Finding the dish by specific name: Pork
2016-07-23 17:35:09 - Selecting the dish list. 
2016-07-23 17:35:09 - Find the employee in the table by the name: Vlada
2016-07-23 17:35:09 - Finding the dish by specific name: Napoleon
2016-07-23 17:35:09 - Finding the dish by specific name: Fries
2016-07-23 17:35:09 - Finding the dish by specific name: Pasta
2016-07-23 17:35:09 - Adding the order to the table. Orders{id=0, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}], tableNumber=4, dateOfOrder=Sat Jul 23 17:35:09 EEST 2016, currentStatus=Open}
2016-07-23 17:35:10 - Delete the dish from the order. 
2016-07-23 17:35:10 - Finding the order by id 7
2016-07-23 17:35:10 - Finding the dish by specific name: Cake
2016-07-23 17:35:10 - Finding the dish by specific name: Pork
2016-07-23 17:35:10 - Editing the order # 7
2016-07-23 17:35:10 - Finding the order by id 1
2016-07-23 17:35:10 - [Error]: This order has already been closed. 
2016-07-23 17:35:10 - Finding the order by id 3
2016-07-23 17:35:10 - [Error]: This order has already been closed. 
2016-07-23 17:35:10 - Selecting the list of orders. 
2016-07-23 17:35:10 - Find the employee in the table by the name: Aleksandr
2016-07-23 17:35:10 - Finding the dish by specific name: Napoleon
2016-07-23 17:35:10 - Finding the order by id 12
2016-07-23 17:35:10 - Adding the prepared dish to the table. PreparedDishes{id=0, cook=Employee{id=4, surname='Ivanov', name='Aleksandr', dateOfBirth='24-10-1980', phoneNumber='063-151-22-44', position='Cook', salary=8000.0}, dish=Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, order=Orders{id=12, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}, Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, Dish{id=11, name='Cake', category=Dessert, price=45.0, weight=250.0}, Dish{id=8, name='Pork', category=Garnish, price=40.0, weight=250.0}], tableNumber=4, dateOfOrder=2016-07-22 00:00:00.0, currentStatus=Open}, date=Sat Jul 23 17:35:10 EEST 2016}
2016-07-23 17:35:10 - Selecting the list of prepared dishes. 
2016-07-23 17:35:10 - Finding the dish by specific name: Fries
2016-07-23 17:35:10 - Finding the dish by specific name: Pasta
2016-07-23 17:35:10 - Adding the menu to the table. Menu{id=0, name='Summer_dinner', dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}]}
2016-07-23 17:35:10 - Adding the dishes to the menu. 
2016-07-23 17:35:10 - Finding the menu by specific name: Spring_morning
2016-07-23 17:35:10 - Finding the dish by specific name: Cake
2016-07-23 17:35:10 - Editing the menu 'Spring_morning'. 
2016-07-23 17:35:10 - Delete the dishes from the menu. 
2016-07-23 17:35:10 - Finding the menu by specific name: Spring_morning
2016-07-23 17:35:10 - Finding the dish by specific name: Cake
2016-07-23 17:35:10 - Editing the menu 'Spring_morning'. 
2016-07-23 17:35:10 - Selecting the list of Menu. 
2016-07-23 17:35:10 - Finding the ingredient by specific name: Potato
2016-07-23 17:35:10 - Adding the ingredient to the stock. Stock{id=0, ingredient=Ingredient{id=10, name='Potato'}, quantity=25}
2016-07-23 17:35:10 - Finding the ingredient by specific name: Potato
2016-07-23 18:14:27 - MLog clients using slf4j logging.
2016-07-23 18:14:27 - Initializing c3p0-0.9.5.2 [built 08-December-2015 22:06:04 -0800; debug? true; trace: 10]
2016-07-23 18:14:28 - HHH000412: Hibernate Core {5.2.1.Final}
2016-07-23 18:14:28 - HHH000206: hibernate.properties not found
2016-07-23 18:14:28 - HHH000021: Bytecode provider name : javassist
2016-07-23 18:14:28 - HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2016-07-23 18:14:28 - Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, contextClassLoaderSource -> caller, dataSourceName -> 1hge0yu9i6qxzdmz3swm|5f058f00, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> org.postgresql.Driver, extensions -> {}, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, forceSynchronousCheckins -> false, forceUseNamedDriverClass -> false, identityToken -> 1hge0yu9i6qxzdmz3swm|5f058f00, idleConnectionTestPeriod -> 0, initialPoolSize -> 3, jdbcUrl -> jdbc:postgresql://localhost:5432/restaurant, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 0, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 15, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 1, numHelperThreads -> 3, preferredTestQuery -> null, privilegeSpawnedThreads -> false, properties -> {user=******, password=******}, propertyCycle -> 0, statementCacheNumDeferredCloseThreads -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, userOverrides -> {}, usesTraditionalReflectiveProxies -> false ]
2016-07-23 18:14:31 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQL94Dialect
2016-07-23 18:14:31 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2016-07-23 18:14:31 - HHH000270: Type registration [java.util.UUID] overrides previous : org.hibernate.type.UUIDBinaryType@2c7b5824
2016-07-23 18:14:33 - Selecting the list of employees. 
2016-07-23 18:14:33 - HHH000397: Using ASTQueryTranslatorFactory
2016-07-23 18:14:33 - Find the employee in the table by the name: Vlada
2016-07-23 18:14:33 - Selecting the list of employees. 
2016-07-23 18:14:33 - Selecting the dish list. 
2016-07-23 18:14:33 - Delete the dish from the table: Dish{id=0, name='Napoleon', category=Dessert, price=50.0, weight=300.0}
2016-07-23 18:14:33 - HHH000114: Handling transient entity in delete processing
2016-07-23 18:14:33 - Finding the dish by specific name: Pork
2016-07-23 18:14:33 - Selecting the dish list. 
2016-07-23 18:14:33 - Find the employee in the table by the name: Vlada
2016-07-23 18:14:33 - Finding the dish by specific name: Napoleon
2016-07-23 18:14:33 - Finding the dish by specific name: Fries
2016-07-23 18:14:33 - Finding the dish by specific name: Pasta
2016-07-23 18:14:33 - Adding the order to the table. Orders{id=0, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}], tableNumber=4, dateOfOrder=Sat Jul 23 18:14:33 EEST 2016, currentStatus=Open}
2016-07-23 18:14:33 - Delete the dish from the order. 
2016-07-23 18:14:33 - Finding the order by id 7
2016-07-23 18:14:33 - Finding the dish by specific name: Cake
2016-07-23 18:14:33 - Finding the dish by specific name: Pork
2016-07-23 18:14:33 - Editing the order # 7
2016-07-23 18:14:33 - Finding the order by id 1
2016-07-23 18:14:33 - [Error]: This order has already been closed. 
2016-07-23 18:14:33 - Finding the order by id 3
2016-07-23 18:14:33 - [Error]: This order has already been closed. 
2016-07-23 18:14:33 - Selecting the list of orders. 
2016-07-23 18:14:33 - Find the employee in the table by the name: Aleksandr
2016-07-23 18:14:33 - Finding the dish by specific name: Napoleon
2016-07-23 18:14:33 - Finding the order by id 12
2016-07-23 18:14:33 - Adding the prepared dish to the table. PreparedDishes{id=0, cook=Employee{id=4, surname='Ivanov', name='Aleksandr', dateOfBirth='24-10-1980', phoneNumber='063-151-22-44', position='Cook', salary=8000.0}, dish=Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, order=Orders{id=12, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}, Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, Dish{id=11, name='Cake', category=Dessert, price=45.0, weight=250.0}, Dish{id=8, name='Pork', category=Garnish, price=40.0, weight=250.0}], tableNumber=4, dateOfOrder=2016-07-22 00:00:00.0, currentStatus=Open}, date=Sat Jul 23 18:14:33 EEST 2016}
2016-07-23 18:14:33 - Selecting the list of prepared dishes. 
2016-07-23 18:14:33 - Finding the dish by specific name: Fries
2016-07-23 18:14:33 - Finding the dish by specific name: Pasta
2016-07-23 18:14:33 - Adding the menu to the table. Menu{id=0, name='Summer_dinner', dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}]}
2016-07-23 18:14:33 - Adding the dishes to the menu. 
2016-07-23 18:14:33 - Finding the menu by specific name: Spring_morning
2016-07-23 18:14:33 - Finding the dish by specific name: Cake
2016-07-23 18:14:33 - Editing the menu 'Spring_morning'. 
2016-07-23 18:14:33 - Delete the dishes from the menu. 
2016-07-23 18:14:33 - Finding the menu by specific name: Spring_morning
2016-07-23 18:14:33 - Finding the dish by specific name: Cake
2016-07-23 18:14:33 - Editing the menu 'Spring_morning'. 
2016-07-23 18:14:33 - Selecting the list of Menu. 
2016-07-23 18:14:33 - Finding the ingredient by specific name: Potato
2016-07-23 18:14:33 - Adding the ingredient to the stock. Stock{id=0, ingredient=Ingredient{id=10, name='Potato'}, quantity=25}
2016-07-23 18:14:33 - Finding the ingredient by specific name: Potato
2016-07-23 18:14:33 - Selecting the list of ingredients. 
2016-07-23 18:14:33 - No ingredient with the name Potato in the stock.
2016-07-23 18:14:33 - No ingredient with the name Potato in the stock.
2016-07-23 18:14:33 - No ingredient with the name Potato in the stock.
2016-07-23 18:14:33 - No ingredient with the name Potato in the stock.
2016-07-23 18:14:33 - No ingredient with the name Potato in the stock.
2016-07-23 18:14:33 - No ingredient with the name Potato in the stock.
2016-07-23 18:14:33 - No ingredient with the name Potato in the stock.
2016-07-23 18:14:33 - No ingredient with the name Potato in the stock.
2016-07-23 18:14:33 - No ingredient with the name Potato in the stock.
2016-07-23 18:14:33 - Delete the ingredient from the stock. Stock{id=10, ingredient=Ingredient{id=10, name='Potato'}, quantity=25}
2016-07-23 18:14:33 - Finding the ingredient by specific name: Tomato
2016-07-23 18:14:33 - Selecting the list of ingredients. 
2016-07-23 18:14:33 - Finding the ingredient by specific name: Cabbage
2016-07-23 18:14:33 - Selecting the list of ingredients. 
2016-07-23 18:14:33 - No ingredient with the name Cabbage in the stock.
2016-07-23 18:14:33 - The quantity of Ingredient{id=2, name='Cabbage'} was changed to 50
2016-07-23 18:14:33 - Update the ingredient information. Stock{id=2, ingredient=Ingredient{id=2, name='Cabbage'}, quantity=50}
2016-07-23 18:14:33 - Selecting the list of ingredients. 
2016-07-23 18:36:19 - MLog clients using slf4j logging.
2016-07-23 18:36:19 - Initializing c3p0-0.9.5.2 [built 08-December-2015 22:06:04 -0800; debug? true; trace: 10]
2016-07-23 18:36:19 - HHH000412: Hibernate Core {5.2.1.Final}
2016-07-23 18:36:19 - HHH000206: hibernate.properties not found
2016-07-23 18:36:19 - HHH000021: Bytecode provider name : javassist
2016-07-23 18:36:19 - HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2016-07-23 18:36:20 - Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, contextClassLoaderSource -> caller, dataSourceName -> 1hge0yu9i6rq3fhe1jmgc|5f058f00, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> org.postgresql.Driver, extensions -> {}, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, forceSynchronousCheckins -> false, forceUseNamedDriverClass -> false, identityToken -> 1hge0yu9i6rq3fhe1jmgc|5f058f00, idleConnectionTestPeriod -> 0, initialPoolSize -> 3, jdbcUrl -> jdbc:postgresql://localhost:5432/restaurant, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 0, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 15, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 1, numHelperThreads -> 3, preferredTestQuery -> null, privilegeSpawnedThreads -> false, properties -> {user=******, password=******}, propertyCycle -> 0, statementCacheNumDeferredCloseThreads -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, userOverrides -> {}, usesTraditionalReflectiveProxies -> false ]
2016-07-23 18:36:24 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQL94Dialect
2016-07-23 18:36:24 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2016-07-23 18:36:24 - HHH000270: Type registration [java.util.UUID] overrides previous : org.hibernate.type.UUIDBinaryType@2c7b5824
2016-07-23 18:36:26 - Selecting the list of employees. 
2016-07-23 18:36:26 - HHH000397: Using ASTQueryTranslatorFactory
2016-07-23 18:36:26 - Find the employee in the table by the name: Vlada
2016-07-23 18:36:26 - Selecting the list of employees. 
2016-07-23 18:36:26 - Selecting the dish list. 
2016-07-23 18:36:26 - Delete the dish from the table: Dish{id=0, name='Napoleon', category=Dessert, price=50.0, weight=300.0}
2016-07-23 18:36:26 - HHH000114: Handling transient entity in delete processing
2016-07-23 18:36:26 - Finding the dish by specific name: Pork
2016-07-23 18:36:26 - Selecting the dish list. 
2016-07-23 18:36:26 - Find the employee in the table by the name: Vlada
2016-07-23 18:36:26 - Finding the dish by specific name: Napoleon
2016-07-23 18:36:26 - Finding the dish by specific name: Fries
2016-07-23 18:36:26 - Finding the dish by specific name: Pasta
2016-07-23 18:36:26 - Adding the order to the table. Orders{id=0, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}], tableNumber=4, dateOfOrder=Sat Jul 23 18:36:26 EEST 2016, currentStatus=Open}
2016-07-23 18:36:26 - Delete the dish from the order. 
2016-07-23 18:36:26 - Finding the order by id 7
2016-07-23 18:36:26 - Finding the dish by specific name: Cake
2016-07-23 18:36:26 - Finding the dish by specific name: Pork
2016-07-23 18:36:26 - Editing the order # 7
2016-07-23 18:36:26 - Finding the order by id 1
2016-07-23 18:36:26 - [Error]: This order has already been closed. 
2016-07-23 18:36:26 - Finding the order by id 3
2016-07-23 18:36:26 - [Error]: This order has already been closed. 
2016-07-23 18:36:26 - Selecting the list of orders. 
2016-07-23 18:36:26 - Find the employee in the table by the name: Aleksandr
2016-07-23 18:36:26 - Finding the dish by specific name: Napoleon
2016-07-23 18:36:26 - Finding the order by id 12
2016-07-23 18:36:26 - Adding the prepared dish to the table. PreparedDishes{id=0, cook=Employee{id=4, surname='Ivanov', name='Aleksandr', dateOfBirth='24-10-1980', phoneNumber='063-151-22-44', position='Cook', salary=8000.0}, dish=Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, order=Orders{id=12, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}, Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, Dish{id=11, name='Cake', category=Dessert, price=45.0, weight=250.0}, Dish{id=8, name='Pork', category=Garnish, price=40.0, weight=250.0}], tableNumber=4, dateOfOrder=2016-07-22 00:00:00.0, currentStatus=Open}, date=Sat Jul 23 18:36:26 EEST 2016}
2016-07-23 18:36:26 - Selecting the list of prepared dishes. 
2016-07-23 18:36:26 - Finding the dish by specific name: Fries
2016-07-23 18:36:26 - Finding the dish by specific name: Pasta
2016-07-23 18:36:26 - Adding the menu to the table. Menu{id=0, name='Summer_dinner', dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}]}
2016-07-23 18:36:26 - Adding the dishes to the menu. 
2016-07-23 18:36:26 - Finding the menu by specific name: Spring_morning
2016-07-23 18:36:26 - Finding the dish by specific name: Cake
2016-07-23 18:36:26 - Editing the menu 'Spring_morning'. 
2016-07-23 18:36:26 - Delete the dishes from the menu. 
2016-07-23 18:36:26 - Finding the menu by specific name: Spring_morning
2016-07-23 18:36:26 - Finding the dish by specific name: Cake
2016-07-23 18:36:26 - Editing the menu 'Spring_morning'. 
2016-07-23 18:36:26 - Selecting the list of Menu. 
2016-07-23 18:36:26 - Finding the ingredient by specific name: Potato
2016-07-23 18:36:26 - Adding the ingredient to the stock. Stock{id=0, ingredient=Ingredient{id=10, name='Potato'}, quantity=25}
2016-07-23 18:36:26 - Finding the ingredient by specific name: Potato
2016-07-23 18:36:26 - Selecting the list of ingredients. 
2016-07-23 18:36:26 - Finding the ingredient by specific name: Potato
2016-07-23 18:36:26 - Finding the ingredient by specific name: Potato
2016-07-23 18:36:26 - Finding the ingredient by specific name: Potato
2016-07-23 18:36:26 - Finding the ingredient by specific name: Potato
2016-07-23 18:36:26 - Finding the ingredient by specific name: Potato
2016-07-23 18:36:26 - Finding the ingredient by specific name: Potato
2016-07-23 18:36:26 - Finding the ingredient by specific name: Potato
2016-07-23 18:36:26 - Finding the ingredient by specific name: Potato
2016-07-23 18:36:26 - Finding the ingredient by specific name: Potato
2016-07-23 18:36:26 - Found: Stock{id=11, ingredient=Ingredient{id=10, name='Potato'}, quantity=25}
2016-07-23 18:36:26 - Delete the ingredient from the stock. Stock{id=11, ingredient=Ingredient{id=10, name='Potato'}, quantity=25}
2016-07-23 18:36:26 - Finding the ingredient by specific name: Tomato
2016-07-23 18:36:26 - Selecting the list of ingredients. 
2016-07-23 18:36:26 - Finding the ingredient by specific name: Tomato
2016-07-23 18:36:26 - Found: Stock{id=1, ingredient=Ingredient{id=1, name='Tomato'}, quantity=5}
2016-07-23 18:36:26 - Finding the ingredient by specific name: Cabbage
2016-07-23 18:36:26 - Selecting the list of ingredients. 
2016-07-23 18:36:26 - Finding the ingredient by specific name: Cabbage
2016-07-23 18:36:26 - Finding the ingredient by specific name: Cabbage
2016-07-23 18:36:26 - Finding the ingredient by specific name: Cabbage
2016-07-23 18:36:26 - Finding the ingredient by specific name: Cabbage
2016-07-23 18:36:26 - Finding the ingredient by specific name: Cabbage
2016-07-23 18:36:26 - Finding the ingredient by specific name: Cabbage
2016-07-23 18:36:26 - Finding the ingredient by specific name: Cabbage
2016-07-23 18:36:26 - Finding the ingredient by specific name: Cabbage
2016-07-23 18:36:26 - Finding the ingredient by specific name: Cabbage
2016-07-23 18:36:26 - Finding the ingredient by specific name: Cabbage
2016-07-23 18:36:26 - Finding the ingredient by specific name: Cabbage
2016-07-23 18:36:26 - Found: Stock{id=2, ingredient=Ingredient{id=2, name='Cabbage'}, quantity=50}
2016-07-23 18:36:26 - The quantity of Ingredient{id=2, name='Cabbage'} was changed to 50
2016-07-23 18:36:26 - Update the ingredient information. Stock{id=2, ingredient=Ingredient{id=2, name='Cabbage'}, quantity=50}
2016-07-23 18:36:26 - Selecting the list of ingredients. 
2016-07-23 18:40:28 - MLog clients using slf4j logging.
2016-07-23 18:40:28 - Initializing c3p0-0.9.5.2 [built 08-December-2015 22:06:04 -0800; debug? true; trace: 10]
2016-07-23 18:40:29 - HHH000412: Hibernate Core {5.2.1.Final}
2016-07-23 18:40:29 - HHH000206: hibernate.properties not found
2016-07-23 18:40:29 - HHH000021: Bytecode provider name : javassist
2016-07-23 18:40:29 - HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2016-07-23 18:40:29 - Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, contextClassLoaderSource -> caller, dataSourceName -> 1hge0yu9i6rvfwp1cxdg5k|5f058f00, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> org.postgresql.Driver, extensions -> {}, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, forceSynchronousCheckins -> false, forceUseNamedDriverClass -> false, identityToken -> 1hge0yu9i6rvfwp1cxdg5k|5f058f00, idleConnectionTestPeriod -> 0, initialPoolSize -> 3, jdbcUrl -> jdbc:postgresql://localhost:5432/restaurant, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 0, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 15, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 1, numHelperThreads -> 3, preferredTestQuery -> null, privilegeSpawnedThreads -> false, properties -> {user=******, password=******}, propertyCycle -> 0, statementCacheNumDeferredCloseThreads -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, userOverrides -> {}, usesTraditionalReflectiveProxies -> false ]
2016-07-23 18:40:32 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQL94Dialect
2016-07-23 18:40:32 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2016-07-23 18:40:32 - HHH000270: Type registration [java.util.UUID] overrides previous : org.hibernate.type.UUIDBinaryType@2c7b5824
2016-07-23 18:40:34 - Selecting the list of employees. 
2016-07-23 18:40:34 - HHH000397: Using ASTQueryTranslatorFactory
2016-07-23 18:40:34 - Find the employee in the table by the name: Vlada
2016-07-23 18:40:34 - Selecting the list of employees. 
2016-07-23 18:40:34 - Selecting the dish list. 
2016-07-23 18:40:34 - Delete the dish from the table: Dish{id=0, name='Napoleon', category=Dessert, price=50.0, weight=300.0}
2016-07-23 18:40:34 - HHH000114: Handling transient entity in delete processing
2016-07-23 18:40:34 - Finding the dish by specific name: Pork
2016-07-23 18:40:34 - Selecting the dish list. 
2016-07-23 18:40:34 - Find the employee in the table by the name: Vlada
2016-07-23 18:40:34 - Finding the dish by specific name: Napoleon
2016-07-23 18:40:34 - Finding the dish by specific name: Fries
2016-07-23 18:40:34 - Finding the dish by specific name: Pasta
2016-07-23 18:40:34 - Adding the order to the table. Orders{id=0, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}], tableNumber=4, dateOfOrder=Sat Jul 23 18:40:34 EEST 2016, currentStatus=Open}
2016-07-23 18:40:34 - Delete the dish from the order. 
2016-07-23 18:40:34 - Finding the order by id 7
2016-07-23 18:40:34 - Finding the dish by specific name: Cake
2016-07-23 18:40:34 - Finding the dish by specific name: Pork
2016-07-23 18:40:34 - Editing the order # 7
2016-07-23 18:40:34 - Finding the order by id 1
2016-07-23 18:40:34 - [Error]: This order has already been closed. 
2016-07-23 18:40:34 - Finding the order by id 3
2016-07-23 18:40:34 - [Error]: This order has already been closed. 
2016-07-23 18:40:34 - Selecting the list of orders. 
2016-07-23 18:40:34 - Find the employee in the table by the name: Aleksandr
2016-07-23 18:40:34 - Finding the dish by specific name: Napoleon
2016-07-23 18:40:34 - Finding the order by id 12
2016-07-23 18:40:34 - Adding the prepared dish to the table. PreparedDishes{id=0, cook=Employee{id=4, surname='Ivanov', name='Aleksandr', dateOfBirth='24-10-1980', phoneNumber='063-151-22-44', position='Cook', salary=8000.0}, dish=Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, order=Orders{id=12, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}, Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, Dish{id=11, name='Cake', category=Dessert, price=45.0, weight=250.0}, Dish{id=8, name='Pork', category=Garnish, price=40.0, weight=250.0}], tableNumber=4, dateOfOrder=2016-07-22 00:00:00.0, currentStatus=Open}, date=Sat Jul 23 18:40:34 EEST 2016}
2016-07-23 18:40:34 - Selecting the list of prepared dishes. 
2016-07-23 18:40:34 - Finding the dish by specific name: Fries
2016-07-23 18:40:34 - Finding the dish by specific name: Pasta
2016-07-23 18:40:34 - Adding the menu to the table. Menu{id=0, name='Summer_dinner', dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}]}
2016-07-23 18:40:34 - Adding the dishes to the menu. 
2016-07-23 18:40:34 - Finding the menu by specific name: Spring_morning
2016-07-23 18:40:34 - Finding the dish by specific name: Cake
2016-07-23 18:40:34 - Editing the menu 'Spring_morning'. 
2016-07-23 18:40:34 - Delete the dishes from the menu. 
2016-07-23 18:40:34 - Finding the menu by specific name: Spring_morning
2016-07-23 18:40:34 - Finding the dish by specific name: Cake
2016-07-23 18:40:34 - Editing the menu 'Spring_morning'. 
2016-07-23 18:40:34 - Selecting the list of Menu. 
2016-07-23 18:40:34 - Finding the ingredient by specific name: Potato
2016-07-23 18:40:34 - Adding the ingredient to the stock. Stock{id=0, ingredient=Ingredient{id=10, name='Potato'}, quantity=25}
2016-07-23 18:40:34 - Finding the ingredient by specific name: Potato
2016-07-23 18:40:34 - Selecting the list of ingredients. 
2016-07-23 18:40:34 - Finding the ingredient by specific name: Potato
2016-07-23 18:40:34 - Finding the ingredient by specific name: Potato
2016-07-23 18:40:34 - Finding the ingredient by specific name: Potato
2016-07-23 18:40:34 - Finding the ingredient by specific name: Potato
2016-07-23 18:40:34 - Finding the ingredient by specific name: Potato
2016-07-23 18:40:34 - Finding the ingredient by specific name: Potato
2016-07-23 18:40:34 - Finding the ingredient by specific name: Potato
2016-07-23 18:40:34 - Finding the ingredient by specific name: Potato
2016-07-23 18:40:34 - Finding the ingredient by specific name: Potato
2016-07-23 18:40:34 - Finding the ingredient by specific name: Potato
2016-07-23 18:40:34 - Found: Stock{id=12, ingredient=Ingredient{id=10, name='Potato'}, quantity=25}
2016-07-23 18:40:34 - Delete the ingredient from the stock. Stock{id=12, ingredient=Ingredient{id=10, name='Potato'}, quantity=25}
2016-07-23 18:40:34 - Finding the ingredient by specific name: Tomato
2016-07-23 18:40:34 - Selecting the list of ingredients. 
2016-07-23 18:40:34 - Finding the ingredient by specific name: Tomato
2016-07-23 18:40:34 - Found: Stock{id=1, ingredient=Ingredient{id=1, name='Tomato'}, quantity=5}
2016-07-23 18:40:34 - Finding the ingredient by specific name: Cabbage
2016-07-23 18:40:34 - Selecting the list of ingredients. 
2016-07-23 18:40:34 - Finding the ingredient by specific name: Cabbage
2016-07-23 18:40:34 - Finding the ingredient by specific name: Cabbage
2016-07-23 18:40:34 - Found: Stock{id=2, ingredient=Ingredient{id=2, name='Cabbage'}, quantity=50}
2016-07-23 18:40:34 - The quantity of Ingredient{id=2, name='Cabbage'} was changed to 50
2016-07-23 18:40:34 - Update the ingredient information. Stock{id=2, ingredient=Ingredient{id=2, name='Cabbage'}, quantity=50}
2016-07-23 18:40:34 - Selecting the list of ingredients. 
2016-07-23 18:40:34 - Selecting the list of ingredients that are almost ended ( < 5). 
2016-07-23 18:41:56 - MLog clients using slf4j logging.
2016-07-23 18:41:57 - Initializing c3p0-0.9.5.2 [built 08-December-2015 22:06:04 -0800; debug? true; trace: 10]
2016-07-23 18:41:57 - HHH000412: Hibernate Core {5.2.1.Final}
2016-07-23 18:41:57 - HHH000206: hibernate.properties not found
2016-07-23 18:41:57 - HHH000021: Bytecode provider name : javassist
2016-07-23 18:41:57 - HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2016-07-23 18:41:57 - Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, contextClassLoaderSource -> caller, dataSourceName -> 1hge0yu9i6rxbwm8cdqno|5f058f00, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> org.postgresql.Driver, extensions -> {}, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, forceSynchronousCheckins -> false, forceUseNamedDriverClass -> false, identityToken -> 1hge0yu9i6rxbwm8cdqno|5f058f00, idleConnectionTestPeriod -> 0, initialPoolSize -> 3, jdbcUrl -> jdbc:postgresql://localhost:5432/restaurant, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 0, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 15, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 1, numHelperThreads -> 3, preferredTestQuery -> null, privilegeSpawnedThreads -> false, properties -> {user=******, password=******}, propertyCycle -> 0, statementCacheNumDeferredCloseThreads -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, userOverrides -> {}, usesTraditionalReflectiveProxies -> false ]
2016-07-23 18:42:00 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQL94Dialect
2016-07-23 18:42:00 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2016-07-23 18:42:00 - HHH000270: Type registration [java.util.UUID] overrides previous : org.hibernate.type.UUIDBinaryType@2c7b5824
2016-07-23 18:42:02 - Selecting the list of employees. 
2016-07-23 18:42:02 - HHH000397: Using ASTQueryTranslatorFactory
2016-07-23 18:42:02 - Find the employee in the table by the name: Vlada
2016-07-23 18:42:02 - Selecting the list of employees. 
2016-07-23 18:42:02 - Selecting the dish list. 
2016-07-23 18:42:02 - Delete the dish from the table: Dish{id=0, name='Napoleon', category=Dessert, price=50.0, weight=300.0}
2016-07-23 18:42:02 - HHH000114: Handling transient entity in delete processing
2016-07-23 18:42:02 - Finding the dish by specific name: Pork
2016-07-23 18:42:02 - Selecting the dish list. 
2016-07-23 18:42:02 - Find the employee in the table by the name: Vlada
2016-07-23 18:42:02 - Finding the dish by specific name: Napoleon
2016-07-23 18:42:02 - Finding the dish by specific name: Fries
2016-07-23 18:42:02 - Finding the dish by specific name: Pasta
2016-07-23 18:42:02 - Adding the order to the table. Orders{id=0, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}], tableNumber=4, dateOfOrder=Sat Jul 23 18:42:02 EEST 2016, currentStatus=Open}
2016-07-23 18:42:02 - Delete the dish from the order. 
2016-07-23 18:42:02 - Finding the order by id 7
2016-07-23 18:42:02 - Finding the dish by specific name: Cake
2016-07-23 18:42:02 - Finding the dish by specific name: Pork
2016-07-23 18:42:02 - Editing the order # 7
2016-07-23 18:42:02 - Finding the order by id 1
2016-07-23 18:42:02 - [Error]: This order has already been closed. 
2016-07-23 18:42:02 - Finding the order by id 3
2016-07-23 18:42:02 - [Error]: This order has already been closed. 
2016-07-23 18:42:02 - Selecting the list of orders. 
2016-07-23 18:42:02 - Find the employee in the table by the name: Aleksandr
2016-07-23 18:42:02 - Finding the dish by specific name: Napoleon
2016-07-23 18:42:02 - Finding the order by id 12
2016-07-23 18:42:02 - Adding the prepared dish to the table. PreparedDishes{id=0, cook=Employee{id=4, surname='Ivanov', name='Aleksandr', dateOfBirth='24-10-1980', phoneNumber='063-151-22-44', position='Cook', salary=8000.0}, dish=Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, order=Orders{id=12, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}, Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, Dish{id=11, name='Cake', category=Dessert, price=45.0, weight=250.0}, Dish{id=8, name='Pork', category=Garnish, price=40.0, weight=250.0}], tableNumber=4, dateOfOrder=2016-07-22 00:00:00.0, currentStatus=Open}, date=Sat Jul 23 18:42:02 EEST 2016}
2016-07-23 18:42:02 - Selecting the list of prepared dishes. 
2016-07-23 18:42:02 - Finding the dish by specific name: Fries
2016-07-23 18:42:02 - Finding the dish by specific name: Pasta
2016-07-23 18:42:02 - Adding the menu to the table. Menu{id=0, name='Summer_dinner', dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}]}
2016-07-23 18:42:02 - Adding the dishes to the menu. 
2016-07-23 18:42:02 - Finding the menu by specific name: Spring_morning
2016-07-23 18:42:02 - Finding the dish by specific name: Cake
2016-07-23 18:42:02 - Editing the menu 'Spring_morning'. 
2016-07-23 18:42:02 - Delete the dishes from the menu. 
2016-07-23 18:42:02 - Finding the menu by specific name: Spring_morning
2016-07-23 18:42:02 - Finding the dish by specific name: Cake
2016-07-23 18:42:02 - Editing the menu 'Spring_morning'. 
2016-07-23 18:42:02 - Selecting the list of Menu. 
2016-07-23 18:42:02 - Finding the ingredient by specific name: Potato
2016-07-23 18:42:02 - Adding the ingredient to the stock. Stock{id=0, ingredient=Ingredient{id=10, name='Potato'}, quantity=25}
2016-07-23 18:42:02 - Finding the ingredient by specific name: Potato
2016-07-23 18:42:02 - Selecting the list of ingredients. 
2016-07-23 18:42:02 - Finding the ingredient by specific name: Potato
2016-07-23 18:42:02 - Finding the ingredient by specific name: Potato
2016-07-23 18:42:02 - Finding the ingredient by specific name: Potato
2016-07-23 18:42:02 - Finding the ingredient by specific name: Potato
2016-07-23 18:42:02 - Finding the ingredient by specific name: Potato
2016-07-23 18:42:02 - Finding the ingredient by specific name: Potato
2016-07-23 18:42:02 - Finding the ingredient by specific name: Potato
2016-07-23 18:42:02 - Finding the ingredient by specific name: Potato
2016-07-23 18:42:02 - Finding the ingredient by specific name: Potato
2016-07-23 18:42:02 - Finding the ingredient by specific name: Potato
2016-07-23 18:42:02 - Found: Stock{id=13, ingredient=Ingredient{id=10, name='Potato'}, quantity=25}
2016-07-23 18:42:02 - Delete the ingredient from the stock. Stock{id=13, ingredient=Ingredient{id=10, name='Potato'}, quantity=25}
2016-07-23 18:42:02 - Finding the ingredient by specific name: Tomato
2016-07-23 18:42:02 - Selecting the list of ingredients. 
2016-07-23 18:42:02 - Finding the ingredient by specific name: Tomato
2016-07-23 18:42:02 - Found: Stock{id=1, ingredient=Ingredient{id=1, name='Tomato'}, quantity=5}
2016-07-23 18:42:02 - Finding the ingredient by specific name: Cabbage
2016-07-23 18:42:02 - Selecting the list of ingredients. 
2016-07-23 18:42:02 - Finding the ingredient by specific name: Cabbage
2016-07-23 18:42:02 - Finding the ingredient by specific name: Cabbage
2016-07-23 18:42:02 - Found: Stock{id=2, ingredient=Ingredient{id=2, name='Cabbage'}, quantity=50}
2016-07-23 18:42:02 - The quantity of Ingredient{id=2, name='Cabbage'} was changed to 50
2016-07-23 18:42:02 - Update the ingredient information. Stock{id=2, ingredient=Ingredient{id=2, name='Cabbage'}, quantity=50}
2016-07-23 18:42:02 - Selecting the list of ingredients. 
2016-07-23 18:42:02 - Selecting the list of ingredients that are almost ended ( < 10). 
2016-07-23 18:42:53 - MLog clients using slf4j logging.
2016-07-23 18:42:53 - Initializing c3p0-0.9.5.2 [built 08-December-2015 22:06:04 -0800; debug? true; trace: 10]
2016-07-23 18:42:54 - HHH000412: Hibernate Core {5.2.1.Final}
2016-07-23 18:42:54 - HHH000206: hibernate.properties not found
2016-07-23 18:42:54 - HHH000021: Bytecode provider name : javassist
2016-07-23 18:42:54 - HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2016-07-23 18:42:54 - Initializing c3p0 pool... com.mchange.v2.c3p0.ComboPooledDataSource [ acquireIncrement -> 1, acquireRetryAttempts -> 30, acquireRetryDelay -> 1000, autoCommitOnClose -> false, automaticTestTable -> null, breakAfterAcquireFailure -> false, checkoutTimeout -> 0, connectionCustomizerClassName -> null, connectionTesterClassName -> com.mchange.v2.c3p0.impl.DefaultConnectionTester, contextClassLoaderSource -> caller, dataSourceName -> 1hge0yu9i6ryjroe27k6p|5f058f00, debugUnreturnedConnectionStackTraces -> false, description -> null, driverClass -> org.postgresql.Driver, extensions -> {}, factoryClassLocation -> null, forceIgnoreUnresolvedTransactions -> false, forceSynchronousCheckins -> false, forceUseNamedDriverClass -> false, identityToken -> 1hge0yu9i6ryjroe27k6p|5f058f00, idleConnectionTestPeriod -> 0, initialPoolSize -> 3, jdbcUrl -> jdbc:postgresql://localhost:5432/restaurant, maxAdministrativeTaskTime -> 0, maxConnectionAge -> 0, maxIdleTime -> 0, maxIdleTimeExcessConnections -> 0, maxPoolSize -> 15, maxStatements -> 0, maxStatementsPerConnection -> 0, minPoolSize -> 1, numHelperThreads -> 3, preferredTestQuery -> null, privilegeSpawnedThreads -> false, properties -> {user=******, password=******}, propertyCycle -> 0, statementCacheNumDeferredCloseThreads -> 0, testConnectionOnCheckin -> false, testConnectionOnCheckout -> false, unreturnedConnectionTimeout -> 0, userOverrides -> {}, usesTraditionalReflectiveProxies -> false ]
2016-07-23 18:42:58 - HHH000400: Using dialect: org.hibernate.dialect.PostgreSQL94Dialect
2016-07-23 18:42:59 - HHH000424: Disabling contextual LOB creation as createClob() method threw error : java.lang.reflect.InvocationTargetException
2016-07-23 18:42:59 - HHH000270: Type registration [java.util.UUID] overrides previous : org.hibernate.type.UUIDBinaryType@2c7b5824
2016-07-23 18:43:00 - Selecting the list of employees. 
2016-07-23 18:43:00 - HHH000397: Using ASTQueryTranslatorFactory
2016-07-23 18:43:00 - Find the employee in the table by the name: Vlada
2016-07-23 18:43:00 - Selecting the list of employees. 
2016-07-23 18:43:00 - Selecting the dish list. 
2016-07-23 18:43:00 - Delete the dish from the table: Dish{id=0, name='Napoleon', category=Dessert, price=50.0, weight=300.0}
2016-07-23 18:43:00 - HHH000114: Handling transient entity in delete processing
2016-07-23 18:43:00 - Finding the dish by specific name: Pork
2016-07-23 18:43:00 - Selecting the dish list. 
2016-07-23 18:43:00 - Find the employee in the table by the name: Vlada
2016-07-23 18:43:00 - Finding the dish by specific name: Napoleon
2016-07-23 18:43:00 - Finding the dish by specific name: Fries
2016-07-23 18:43:00 - Finding the dish by specific name: Pasta
2016-07-23 18:43:00 - Adding the order to the table. Orders{id=0, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}], tableNumber=4, dateOfOrder=Sat Jul 23 18:43:00 EEST 2016, currentStatus=Open}
2016-07-23 18:43:00 - Delete the dish from the order. 
2016-07-23 18:43:00 - Finding the order by id 7
2016-07-23 18:43:00 - Finding the dish by specific name: Cake
2016-07-23 18:43:00 - Finding the dish by specific name: Pork
2016-07-23 18:43:00 - Editing the order # 7
2016-07-23 18:43:00 - Finding the order by id 1
2016-07-23 18:43:00 - [Error]: This order has already been closed. 
2016-07-23 18:43:00 - Finding the order by id 3
2016-07-23 18:43:00 - [Error]: This order has already been closed. 
2016-07-23 18:43:00 - Selecting the list of orders. 
2016-07-23 18:43:00 - Find the employee in the table by the name: Aleksandr
2016-07-23 18:43:00 - Finding the dish by specific name: Napoleon
2016-07-23 18:43:00 - Finding the order by id 12
2016-07-23 18:43:00 - Adding the prepared dish to the table. PreparedDishes{id=0, cook=Employee{id=4, surname='Ivanov', name='Aleksandr', dateOfBirth='24-10-1980', phoneNumber='063-151-22-44', position='Cook', salary=8000.0}, dish=Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, order=Orders{id=12, waiter=Employee{id=21, surname='Popova', name='Vlada', dateOfBirth='25-01-1965', phoneNumber='053-123-42-53', position='Waiter', salary=4000.0}, dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}, Dish{id=12, name='Napoleon', category=Dessert, price=50.0, weight=300.0}, Dish{id=11, name='Cake', category=Dessert, price=45.0, weight=250.0}, Dish{id=8, name='Pork', category=Garnish, price=40.0, weight=250.0}], tableNumber=4, dateOfOrder=2016-07-22 00:00:00.0, currentStatus=Open}, date=Sat Jul 23 18:43:00 EEST 2016}
2016-07-23 18:43:00 - Selecting the list of prepared dishes. 
2016-07-23 18:43:01 - Finding the dish by specific name: Fries
2016-07-23 18:43:01 - Finding the dish by specific name: Pasta
2016-07-23 18:43:01 - Adding the menu to the table. Menu{id=0, name='Summer_dinner', dishes=[Dish{id=4, name='Fries', category=Garnish, price=30.0, weight=250.0}, Dish{id=5, name='Pasta', category=Garnish, price=35.0, weight=250.0}]}
2016-07-23 18:43:01 - Adding the dishes to the menu. 
2016-07-23 18:43:01 - Finding the menu by specific name: Spring_morning
2016-07-23 18:43:01 - Finding the dish by specific name: Cake
2016-07-23 18:43:01 - Editing the menu 'Spring_morning'. 
2016-07-23 18:43:01 - Delete the dishes from the menu. 
2016-07-23 18:43:01 - Finding the menu by specific name: Spring_morning
2016-07-23 18:43:01 - Finding the dish by specific name: Cake
2016-07-23 18:43:01 - Editing the menu 'Spring_morning'. 
2016-07-23 18:43:01 - Selecting the list of Menu. 
2016-07-23 18:43:01 - Finding the ingredient by specific name: Potato
2016-07-23 18:43:01 - Adding the ingredient to the stock. Stock{id=0, ingredient=Ingredient{id=10, name='Potato'}, quantity=25}
2016-07-23 18:43:01 - Finding the ingredient by specific name: Potato
2016-07-23 18:43:01 - Selecting the list of ingredients. 
2016-07-23 18:43:01 - Finding the ingredient by specific name: Potato
2016-07-23 18:43:01 - Finding the ingredient by specific name: Potato
2016-07-23 18:43:01 - Finding the ingredient by specific name: Potato
2016-07-23 18:43:01 - Finding the ingredient by specific name: Potato
2016-07-23 18:43:01 - Finding the ingredient by specific name: Potato
2016-07-23 18:43:01 - Finding the ingredient by specific name: Potato
2016-07-23 18:43:01 - Finding the ingredient by specific name: Potato
2016-07-23 18:43:01 - Finding the ingredient by specific name: Potato
2016-07-23 18:43:01 - Finding the ingredient by specific name: Potato
2016-07-23 18:43:01 - Finding the ingredient by specific name: Potato
2016-07-23 18:43:01 - Found: Stock{id=10, ingredient=Ingredient{id=10, name='Potato'}, quantity=25}
2016-07-23 18:43:01 - Delete the ingredient from the stock. Stock{id=10, ingredient=Ingredient{id=10, name='Potato'}, quantity=25}
2016-07-23 18:43:01 - Finding the ingredient by specific name: Tomato
2016-07-23 18:43:01 - Selecting the list of ingredients. 
2016-07-23 18:43:01 - Finding the ingredient by specific name: Tomato
2016-07-23 18:43:01 - Found: Stock{id=1, ingredient=Ingredient{id=1, name='Tomato'}, quantity=5}
2016-07-23 18:43:01 - Finding the ingredient by specific name: Cabbage
2016-07-23 18:43:01 - Selecting the list of ingredients. 
2016-07-23 18:43:01 - Finding the ingredient by specific name: Cabbage
2016-07-23 18:43:01 - Finding the ingredient by specific name: Cabbage
2016-07-23 18:43:01 - Found: Stock{id=2, ingredient=Ingredient{id=2, name='Cabbage'}, quantity=50}
2016-07-23 18:43:01 - The quantity of Ingredient{id=2, name='Cabbage'} was changed to 50
2016-07-23 18:43:01 - Update the ingredient information. Stock{id=2, ingredient=Ingredient{id=2, name='Cabbage'}, quantity=50}
2016-07-23 18:43:01 - Selecting the list of ingredients. 
2016-07-23 18:43:01 - Selecting the list of ingredients that are almost ended ( < 10). 
